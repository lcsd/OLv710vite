{"version":3,"file":"vector-wfs-getfeature.js","mappings":"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","sources":["webpack:///../src/ol/format/GML3.js","webpack:///../src/ol/format/GML32.js","webpack:///../src/ol/format/filter/Filter.js","webpack:///../src/ol/format/filter/LogicalNary.js","webpack:///../src/ol/format/filter/And.js","webpack:///../src/ol/format/filter/Bbox.js","webpack:///../src/ol/format/filter/Comparison.js","webpack:///../src/ol/format/filter/ComparisonBinary.js","webpack:///../src/ol/format/filter/EqualTo.js","webpack:///../src/ol/format/filter/IsLike.js","webpack:///../src/ol/format/filter.js","webpack:///../src/ol/format/WFS.js","webpack:///./vector-wfs-getfeature.js"],"sourcesContent":["/**\n * @module ol/format/GML3\n */\nimport GML2 from './GML2.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  getAllTextContent,\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {createOrUpdate} from '../extent.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation =\n  GMLNS +\n  ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n  '1.0.0/gmlsf.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ =\n      options.multiCurve !== undefined ? options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ =\n      options.multiSurface !== undefined ? options.multiSurface : true;\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Polygon.\n   */\n  readFlatCurveRing(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    const flatCoordinates = [];\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop(\n      [],\n      this.MULTISURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  curveMemberParser(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  surfaceMemberParser(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.PATCHES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment(node, objectStack) {\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.FLAT_LINEAR_RINGS_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  interiorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  exteriorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop(\n      [null],\n      this.SURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.CURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.ENVELOPE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[2][0],\n      flatCoordinates[2][1]\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    if (axisOrientation === 'neu') {\n      let i, ii;\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n      /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n    ) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n      );\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    const point = value.getCoordinates();\n    let coords;\n    // only 2d for simple features profile\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = point[0] + ' ' + point[1];\n    } else {\n      coords = point[1] + ' ' + point[0];\n    }\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    let coords =\n      axisOrientation.substr(0, 2) === 'en'\n        ? point[0] + ' ' + point[1]\n        : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior'\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement,\n      this\n    );\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS),\n      features,\n      objectStack\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace, nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n  writeGeometryNode(geometry, options) {\n    options = this.adaptOptions(options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Element} Node.\n   * @api\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation\n    );\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML3;\n","/**\n * @module ol/format/GML32\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GMLBase from './GMLBase.js';\nimport {\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n} from '../xml.js';\nimport {writeStringTextNode} from '../format/xsd.js';\n\n/**\n * @classdesc Feature format for reading and writing data in the GML format\n *            version 3.2.1.\n * @api\n */\nclass GML32 extends GML3 {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';\n  }\n}\n\nGML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML32.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML32.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML32.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n    'lineStringMembers': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML32.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML32.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML32;\n","/**\n * @module ol/format/filter/Filter\n */\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @abstract\n */\nclass Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   */\n  constructor(tagName) {\n    /**\n     * @private\n     * @type {!string}\n     */\n    this.tagName_ = tagName;\n  }\n\n  /**\n   * The XML tag name for a filter.\n   * @return {!string} Name.\n   */\n  getTagName() {\n    return this.tagName_;\n  }\n}\n\nexport default Filter;\n","/**\n * @module ol/format/filter/LogicalNary\n */\nimport Filter from './Filter.js';\nimport {assert} from '../../asserts.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n  }\n}\n\nexport default LogicalNary;\n","/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n}\n\nexport default And;\n","/**\n * @module ol/format/filter/Bbox\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @api\n */\nclass Bbox extends Filter {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be set\n   * on geometries when this is not provided.\n   */\n  constructor(geometryName, extent, srsName) {\n    super('BBOX');\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName;\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent = extent;\n    if (extent.length !== 4) {\n      throw new Error(\n        'Expected an extent with four values ([minX, minY, maxX, maxY])'\n      );\n    }\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = srsName;\n  }\n}\n\nexport default Bbox;\n","/**\n * @module ol/format/filter/Comparison\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @abstract\n */\nclass Comparison extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(tagName, propertyName) {\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.propertyName = propertyName;\n  }\n}\n\nexport default Comparison;\n","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\nclass ComparisonBinary extends Comparison {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(tagName, propertyName, expression, matchCase) {\n    super(tagName, propertyName);\n\n    /**\n     * @type {!(string|number)}\n     */\n    this.expression = expression;\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\n\nexport default ComparisonBinary;\n","/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(propertyName, expression, matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, matchCase);\n  }\n}\n\nexport default EqualTo;\n","/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string} [wildCard] Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string} [singleChar] pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string} [escapeChar] Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase\n  ) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = wildCard !== undefined ? wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = singleChar !== undefined ? singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = escapeChar !== undefined ? escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\n\nexport default IsLike;\n","/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport DWithin from './filter/DWithin.js';\nimport Disjoint from './filter/Disjoint.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport ResourceId from './filter/ResourceId.js';\nimport Within from './filter/Within.js';\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params))();\n}\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params))();\n}\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @return {!Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, srsName) {\n  return new Bbox(geometryName, extent, srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, srsName) {\n  return new Contains(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, srsName) {\n  return new Intersects(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\n * is disjoint to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Disjoint} `<Disjoint>` operator.\n * @api\n */\nexport function disjoint(geometryName, geometry, srsName) {\n  return new Disjoint(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, srsName) {\n  return new Within(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<DWithin>` operator to test whether a geometry-valued property\n * is within a distance to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {!number} distance Distance.\n * @param {!string} unit Unit.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!DWithin} `<DWithin>` operator.\n * @api\n */\nexport function dwithin(geometryName, geometry, distance, unit, srsName) {\n  return new DWithin(geometryName, geometry, distance, unit, srsName);\n}\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, matchCase) {\n  return new EqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, matchCase) {\n  return new NotEqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @return {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string} [wildCard] Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string} [singleChar] pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string} [escapeChar] Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(\n  propertyName,\n  pattern,\n  wildCard,\n  singleChar,\n  escapeChar,\n  matchCase\n) {\n  return new IsLike(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase\n  );\n}\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @return {!During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n\nexport function resourceId(rid) {\n  return new ResourceId(rid);\n}\n","/**\n * @module ol/format/WFS\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GML32 from './GML32.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport XMLFeature from './XMLFeature.js';\nimport {\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  isDocument,\n  makeArrayPusher,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeSimpleNodeFactory,\n  parse,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {and as andFilterFn, bbox as bboxFilterFn} from './filter.js';\nimport {assert} from '../asserts.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  readNonNegativeIntegerString,\n  readPositiveInteger,\n  writeStringTextNode,\n} from './xsd.js';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(\n      GMLBase.prototype.readExtentElement,\n      'bounds'\n    ),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n};\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.\n * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to\n * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are\n * ignored.).\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`\n * option must be set.\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\n * {@link module:ol/format/filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n/**\n * @typedef {Object} FeatureType\n * @property {!string} name The feature type name.\n * @property {!import(\"../extent.js\").Extent} bbox Extent to use for the BBOX filter.\n * @property {!string} geometryName Geometry name to use in the BBOX filter.\n */\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures NumberOfFeatures.\n * @property {import(\"../extent.js\").Extent} bounds Bounds.\n */\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {number} totalDeleted TotalDeleted.\n * @property {number} totalInserted TotalInserted.\n * @property {number} totalUpdated TotalUpdated.\n * @property {Array<string>} insertIds InsertIds.\n */\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n/**\n * @type {Object<string, string>}\n */\nconst OGCNS = {\n  '2.0.0': 'http://www.opengis.net/ogc/1.1',\n  '1.1.0': 'http://www.opengis.net/ogc',\n  '1.0.0': 'http://www.opengis.net/ogc',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst WFSNS = {\n  '2.0.0': 'http://www.opengis.net/wfs/2.0',\n  '1.1.0': 'http://www.opengis.net/wfs',\n  '1.0.0': 'http://www.opengis.net/wfs',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst FESNS = {\n  '2.0.0': 'http://www.opengis.net/fes/2.0',\n  '1.1.0': 'http://www.opengis.net/fes',\n  '1.0.0': 'http://www.opengis.net/fes',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '2.0.0':\n    'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',\n  '1.1.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',\n};\n\n/**\n * @type {Object<string, object>}\n */\nconst GML_FORMATS = {\n  '2.0.0': GML32,\n  '1.1.0': GML3,\n  '1.0.0': GML2,\n};\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option to override the default.\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @api\n */\nclass WFS extends XMLFeature {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version ? options.version : DEFAULT_VERSION;\n\n    /**\n     * @private\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType_ = options.featureType;\n\n    /**\n     * @private\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS_ = options.featureNS;\n\n    /**\n     * @private\n     * @type {GMLBase}\n     */\n    this.gmlFormat_ = options.gmlFormat\n      ? options.gmlFormat\n      : new GML_FORMATS[this.version_]();\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.schemaLocation_ = options.schemaLocation\n      ? options.schemaLocation\n      : SCHEMA_LOCATIONS[this.version_];\n  }\n\n  /**\n   * @return {Array<string>|string|undefined} featureType\n   */\n  getFeatureType() {\n    return this.featureType_;\n  }\n\n  /**\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\n   */\n  setFeatureType(featureType) {\n    this.featureType_ = featureType;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    Object.assign(context, {\n      'featureType': this.featureType_,\n      'featureNS': this.featureNS_,\n    });\n\n    Object.assign(context, this.getReadOptions(node, options ? options : {}));\n    const objectStack = [context];\n    let featuresNS;\n    if (this.version_ === '2.0.0') {\n      featuresNS = FEATURE_COLLECTION_PARSERS;\n    } else {\n      featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;\n    }\n    let features = pushParseAndPop(\n      [],\n      featuresNS,\n      node,\n      objectStack,\n      this.gmlFormat_\n    );\n    if (!features) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * Read transaction response of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {TransactionResponse|undefined} Transaction response.\n   * @api\n   */\n  readTransactionResponse(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readTransactionResponseFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readTransactionResponseFromDocument(\n        /** @type {Document} */ (source)\n      );\n    } else {\n      return this.readTransactionResponseFromNode(\n        /** @type {Element} */ (source)\n      );\n    }\n  }\n\n  /**\n   * Read feature collection metadata of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   * @api\n   */\n  readFeatureCollectionMetadata(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureCollectionMetadataFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFeatureCollectionMetadataFromDocument(\n        /** @type {Document} */ (source)\n      );\n    } else {\n      return this.readFeatureCollectionMetadataFromNode(\n        /** @type {Element} */ (source)\n      );\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFeatureCollectionMetadataFromNode(\n          /** @type {Element} */ (n)\n        );\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromNode(node) {\n    const result = {};\n    const value = readNonNegativeIntegerString(\n      node.getAttribute('numberOfFeatures')\n    );\n    result['numberOfFeatures'] = value;\n    return pushParseAndPop(\n      /** @type {FeatureCollectionMetadata} */ (result),\n      FEATURE_COLLECTION_PARSERS,\n      node,\n      [],\n      this.gmlFormat_\n    );\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromNode(node) {\n    return pushParseAndPop(\n      /** @type {TransactionResponse} */ ({}),\n      TRANSACTION_RESPONSE_PARSERS,\n      node,\n      []\n    );\n  }\n\n  /**\n   * Encode format as WFS `GetFeature` and return the Node.\n   *\n   * @param {WriteGetFeatureOptions} options Options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeGetFeature(options) {\n    const node = createElementNS(WFSNS[this.version_], 'GetFeature');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', this.version_);\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', String(options.maxFeatures));\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', String(options.startIndex));\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', String(options.count));\n    }\n    if (options.viewParams !== undefined) {\n      node.setAttribute('viewParams', options.viewParams);\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation_\n    );\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    Object.assign(context, {\n      'version': this.version_,\n      'srsName': options.srsName,\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n      'featurePrefix': options.featurePrefix,\n      'propertyNames': options.propertyNames ? options.propertyNames : [],\n    });\n    assert(Array.isArray(options.featureTypes), 11); // `options.featureTypes` must be an Array\n    if (typeof options.featureTypes[0] === 'string') {\n      let filter = options.filter;\n      if (options.bbox) {\n        assert(options.geometryName, 12); // `options.geometryName` must also be provided when `options.bbox` is set\n        filter = this.combineBboxAndFilter(\n          options.geometryName,\n          options.bbox,\n          options.srsName,\n          filter\n        );\n      }\n      Object.assign(context, {\n        'geometryName': options.geometryName,\n        'filter': filter,\n      });\n      writeGetFeature(\n        node,\n        /** @type {!Array<string>} */ (options.featureTypes),\n        [context]\n      );\n    } else {\n      // Write one query node per element in featuresType.\n      options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {\n        const completeFilter = this.combineBboxAndFilter(\n          featureType.geometryName,\n          featureType.bbox,\n          options.srsName,\n          options.filter\n        );\n        Object.assign(context, {\n          'geometryName': featureType.geometryName,\n          'filter': completeFilter,\n        });\n        writeGetFeature(node, [featureType.name], [context]);\n      });\n    }\n    return node;\n  }\n\n  /**\n   * Create a bbox filter and combine it with another optional filter.\n   *\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   * @param {import(\"./filter/Filter.js\").default} [filter] Filter condition.\n   * @return {import(\"./filter/Filter.js\").default} The filter.\n   */\n  combineBboxAndFilter(geometryName, extent, srsName, filter) {\n    const bboxFilter = bboxFilterFn(geometryName, extent, srsName);\n    if (filter) {\n      // if bbox and filter are both set, combine the two into a single filter\n      return andFilterFn(filter, bboxFilter);\n    }\n    return bboxFilter;\n  }\n\n  /**\n   * Encode format as WFS `Transaction` and return the Node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\n   * @param {WriteTransactionOptions} options Write options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeTransaction(inserts, updates, deletes, options) {\n    const objectStack = [];\n    const version = options.version ? options.version : this.version_;\n    const node = createElementNS(WFSNS[version], 'Transaction');\n\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', version);\n    let baseObj;\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    if (options) {\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATIONS[version]\n    );\n\n    const request = createTransactionRequest(node, baseObj, version, options);\n    if (inserts) {\n      serializeTransactionRequest('Insert', inserts, objectStack, request);\n    }\n    if (updates) {\n      serializeTransactionRequest('Update', updates, objectStack, request);\n    }\n    if (deletes) {\n      serializeTransactionRequest('Delete', deletes, objectStack, request);\n    }\n    if (options.nativeElements) {\n      serializeTransactionRequest(\n        'Native',\n        options.nativeElements,\n        objectStack,\n        request\n      );\n    }\n    return node;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromDocument(doc) {\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readProjectionFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    if (node.firstElementChild && node.firstElementChild.firstElementChild) {\n      node = node.firstElementChild.firstElementChild;\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        if (\n          !(\n            n.childNodes.length === 0 ||\n            (n.childNodes.length === 1 && n.firstChild.nodeType === 3)\n          )\n        ) {\n          const objectStack = [{}];\n          this.gmlFormat_.readGeometryElement(n, objectStack);\n          return getProjection(objectStack.pop().srsName);\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {*} baseObj Base object.\n * @param {string} version Version.\n * @param {WriteTransactionOptions} options Options.\n * @return {Object} Request object.\n */\nfunction createTransactionRequest(node, baseObj, version, options) {\n  const featurePrefix = options.featurePrefix\n    ? options.featurePrefix\n    : FEATURE_PREFIX;\n  let gmlVersion;\n  if (version === '1.0.0') {\n    gmlVersion = 2;\n  } else if (version === '1.1.0') {\n    gmlVersion = 3;\n  } else if (version === '2.0.0') {\n    gmlVersion = 3.2;\n  }\n  const obj = Object.assign(\n    {node},\n    {\n      version,\n      'featureNS': options.featureNS,\n      'featureType': options.featureType,\n      'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion,\n      'hasZ': options.hasZ,\n      'srsName': options.srsName,\n    },\n    baseObj\n  );\n  return obj;\n}\n\n/**\n * @param {string} type Request type.\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @param {Element} request Transaction Request.\n */\nfunction serializeTransactionRequest(type, features, objectStack, request) {\n  pushSerializeAndPop(\n    request,\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory(type),\n    features,\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n  'http://www.opengis.net/ogc/1.1': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser,\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Feature': fidParser,\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else if (gmlVersion === 3) {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML32.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = OGCNS[version];\n  const filter = createElementNS(ns, 'Filter');\n  const child = createElementNS(ns, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', /** @type {string} */ (fid));\n  node.appendChild(filter);\n}\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @return {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.startsWith(prefix)) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const version = context['version'];\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (\n          value &&\n          typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'\n        ) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */ ({\n        version,\n        'gmlVersion': context['gmlVersion'],\n        node,\n        'hasZ': context['hasZ'],\n        'srsName': context['srsName'],\n      }),\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Property'),\n      values,\n      objectStack\n    );\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = WFSNS[version];\n  const name = createElementNS(ns, 'Name');\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(ns, 'Value');\n    node.appendChild(value);\n    if (\n      pair.value &&\n      typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===\n        'function'\n    ) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else if (gmlVersion === 3) {\n        GML3.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else {\n        GML32.prototype.writeGeometryElement(value, pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n  'http://www.opengis.net/fes/2.0': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Disjoint': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'ResourceId': makeChildAppender(writeResourceIdFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {string} featureType Feature type.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const version = context['version'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  let typeNameAttr;\n  if (version === '2.0.0') {\n    typeNameAttr = 'typeNames';\n  } else {\n    typeNameAttr = 'typeName';\n  }\n  node.setAttribute(typeNameAttr, typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    Object.assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    QUERY_SERIALIZERS,\n    makeSimpleNodeFactory('PropertyName'),\n    propertyNames,\n    objectStack\n  );\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(getFilterNS(version), 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(filter.getTagName()),\n    [filter],\n    objectStack\n  );\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n/**\n * @param {Element} node Element.\n * @param {import(\"./filter/ResourceId.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeResourceIdFilter(node, filter, objectStack) {\n  node.setAttribute('rid', /** @type {string} */ (filter.rid));\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Spatial.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeSpatialFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/DWithin.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDWithinFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writeSpatialFilter(node, filter, objectStack);\n  const distance = createElementNS(getFilterNS(version), 'Distance');\n  writeStringTextNode(distance, filter.distance.toString());\n  if (version === '2.0.0') {\n    distance.setAttribute('uom', filter.unit);\n  } else {\n    distance.setAttribute('units', filter.unit);\n  }\n  node.appendChild(distance);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/During.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n\n  writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(\n      item,\n      GETFEATURE_SERIALIZERS,\n      makeSimpleNodeFactory(condition.getTagName()),\n      [condition],\n      objectStack\n    );\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Not.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  const condition = filter.condition;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(condition.getTagName()),\n    [condition],\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.expression);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writePropertyName(version, node, filter.propertyName);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  const ns = getFilterNS(version);\n\n  writePropertyName(version, node, filter.propertyName);\n\n  const lowerBoundary = createElementNS(ns, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = createElementNS(ns, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeLiteral(version, upperBoundary, '' + filter.upperBoundary);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.pattern);\n}\n\n/**\n * @param {string} ns Namespace.\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeExpression(ns, tagName, node, value) {\n  const property = createElementNS(ns, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeLiteral(version, node, value) {\n  writeExpression(getFilterNS(version), 'Literal', node, value);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writePropertyName(version, node, value) {\n  if (version === '2.0.0') {\n    writeExpression(FESNS[version], 'ValueReference', node, value);\n  } else {\n    writeExpression(OGCNS[version], 'PropertyName', node, value);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {string} version WFS version. If not provided defaults to '1.1.0'\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter, version) {\n  version = version || '1.1.0';\n  const child = createElementNS(getFilterNS(version), 'Filter');\n  const context = {\n    node: child,\n  };\n  Object.assign(context, {\n    'version': version,\n    'filter': filter,\n  });\n  writeFilterCondition(child, filter, [context]);\n  return child;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<string>} featureTypes Feature types.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    Object.assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory('Query'),\n    featureTypes,\n    objectStack\n  );\n}\n\nfunction getFilterNS(version) {\n  let ns;\n  if (version === '2.0.0') {\n    ns = FESNS[version];\n  } else {\n    ns = OGCNS[version];\n  }\n  return ns;\n}\n\nexport default WFS;\n","import Map from '../src/ol/Map.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {GeoJSON, WFS} from '../src/ol/format.js';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {\n  and as andFilter,\n  equalTo as equalToFilter,\n  like as likeFilter,\n} from '../src/ol/format/filter.js';\n\nconst vectorSource = new VectorSource();\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2,\n    }),\n  }),\n});\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    maxZoom: 20,\n  }),\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [-8908887.277395891, 5381918.072437216],\n    maxZoom: 19,\n    zoom: 12,\n  }),\n});\n\n// generate a GetFeature request\nconst featureRequest = new WFS().writeGetFeature({\n  srsName: 'EPSG:3857',\n  featureNS: 'http://openstreemap.org',\n  featurePrefix: 'osm',\n  featureTypes: ['water_areas'],\n  outputFormat: 'application/json',\n  filter: andFilter(\n    likeFilter('name', 'Mississippi*'),\n    equalToFilter('waterway', 'riverbank')\n  ),\n});\n\n// then post the request and add the received features to a layer\nfetch('https://ahocevar.com/geoserver/wfs', {\n  method: 'POST',\n  body: new XMLSerializer().serializeToString(featureRequest),\n})\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (json) {\n    const features = new GeoJSON().readFeatures(json);\n    vectorSource.addFeatures(features);\n    map.getView().fit(vectorSource.getExtent());\n  });\n"],"names":["schemaLocation","MULTIGEOMETRY_TO_MEMBER_NODENAME","GML3","GMLBase","constructor","options","super","this","surface_","undefined","surface","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","hasZ","readMultiCurve","node","objectStack","lineStrings","MULTICURVE_PARSERS","MultiLineString","readFlatCurveRing","flatCoordinates","i","ii","length","getFlatCoordinates","readMultiSurface","polygons","MULTISURFACE_PARSERS","MultiPolygon","curveMemberParser","CURVEMEMBER_PARSERS","surfaceMemberParser","SURFACEMEMBER_PARSERS","readPatch","PATCHES_PARSERS","readSegment","SEGMENTS_PARSERS","readPolygonPatch","FLAT_LINEAR_RINGS_PARSERS","readLineStringSegment","GEOMETRY_FLAT_COORDINATES_PARSERS","interiorParser","flatLinearRing","RING_PARSERS","push","exteriorParser","readSurface","flatLinearRings","SURFACE_PARSERS","ends","Polygon","readCurve","CURVE_PARSERS","LineString","readEnvelope","ENVELOPE_PARSERS","readFlatPos","s","re","m","exec","parseFloat","substr","containerSrs","axisOrientation","getAxisOrientation","y","x","len","readFlatPosList","replace","context","contextDimension","coords","split","z","dim","getAttribute","writePos_","value","srsDimension","setAttribute","srsName","point","getCoordinates","getCoords_","writePosList_","points","parts","Array","join","writePoint","geometry","pos","c","namespaceURI","appendChild","writeEnvelope","extent","values","ENVELOPE_SERIALIZERS","writeLinearRing","posList","RING_NODE_FACTORY_","nodeName","parentNode","exteriorWritten","writeSurfaceOrPolygon","rings","getLinearRings","RING_SERIALIZERS","patches","writeSurfacePatches_","writeCurveOrLineString","segments","writeCurveSegments_","writeMultiSurfaceOrPolygon","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint","getPoints","POINTMEMBER_SERIALIZERS","writeMultiCurveOrLineString","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS","writeRing","ring","linearRing","writeSurfaceOrPolygonMember","polygon","child","GEOMETRY_NODE_FACTORY_","writePointMember","writeLineStringOrCurveMember","line","writeGeometryElement","item","Object","assign","isArray","GEOMETRY_SERIALIZERS","writeFeatureElement","feature","fid","getId","featureNS","geometryName","getGeometryName","serializers","keys","hasProperties","properties","getProperties","key","writeFeatureMembers_","features","featureType","namespace","getType","writeGeometryNode","adaptOptions","geom","writeFeaturesNode","setAttributeNS","prototype","GML2","GEOMETRY_PARSERS","writeFeatures","GML32","MULTIPOINT_PARSERS","MULTILINESTRING_PARSERS","MULTIPOLYGON_PARSERS","POINTMEMBER_PARSERS","LINESTRINGMEMBER_PARSERS","POLYGONMEMBER_PARSERS","tagName","tagName_","getTagName","conditions","slice","call","arguments","Error","propertyName","expression","matchCase","pattern","wildCard","singleChar","escapeChar","and","params","concat","Function","bind","apply","FEATURE_COLLECTION_PARSERS","TRANSACTION_SUMMARY_PARSERS","TRANSACTION_RESPONSE_PARSERS","readTransactionSummary","readInsertResults","QUERY_SERIALIZERS","TRANSACTION_SERIALIZERS","writeFeature","writeUpdate","writeDelete","writeProperty","writeNative","FEATURE_PREFIX","XMLNS","OGCNS","WFSNS","FESNS","SCHEMA_LOCATIONS","GML_FORMATS","WFS","XMLFeature","version_","version","featureType_","featureNS_","gmlFormat_","gmlFormat","schemaLocation_","getFeatureType","setFeatureType","readFeaturesFromNode","getReadOptions","featuresNS","readTransactionResponse","source","doc","readTransactionResponseFromDocument","readTransactionResponseFromNode","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","n","nextSibling","nodeType","Node","ELEMENT_NODE","result","writeGetFeature","handle","outputFormat","maxFeatures","String","resultType","startIndex","count","viewParams","featurePrefix","propertyNames","featureTypes","filter","bbox","combineBboxAndFilter","forEach","completeFilter","name","bboxFilter","writeTransaction","inserts","updates","deletes","baseObj","gmlOptions","request","gmlVersion","createTransactionRequest","serializeTransactionRequest","nativeElements","readProjectionFromDocument","firstChild","readProjectionFromNode","firstElementChild","nextElementSibling","childNodes","readGeometryElement","pop","type","OGC_FID_PARSERS","fidParser","INSERT_RESULTS_PARSERS","writeOgcFidFilter","ns","getTypeName","prefix","startsWith","typeName","getKeys","get","pair","nativeElement","vendorId","safeToIgnore","GETFEATURE_SERIALIZERS","writeQuery","writeDuringFilter","writeLogicalFilter","writeNotFilter","writeBboxFilter","writeSpatialFilter","writeDWithinFilter","writeComparisonFilter","writeIsNullFilter","writeIsBetweenFilter","writeIsLikeFilter","typeNameAttr","getFilterNS","writeFilterCondition","parent","format","writePropertyName","distance","toString","unit","writeExpression","timePeriod","begin","writeTimeInstant","end","condition","writeLiteral","lowerBoundary","upperBoundary","property","time","timeInstant","timePosition","vectorSource","Vector","vector","style","Style","stroke","Stroke","color","width","raster","Tile","XYZ","attributions","url","maxZoom","map","Map","layers","target","document","getElementById","view","View","center","zoom","featureRequest","equalTo","fetch","method","body","XMLSerializer","serializeToString","then","response","json","GeoJSON","readFeatures","addFeatures","getView","fit","getExtent"],"sourceRoot":""}