{"version":3,"file":"arcgis-image.js","mappings":"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","sources":["webpack:///../src/ol/source/ImageArcGISRest.js","webpack:///./arcgis-image.js"],"sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options} [options] Image ArcGIS Rest Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    Object.assign(params, this.params_);\n\n    extent = extent.slice();\n    const centerX = (extent[0] + extent[2]) / 2;\n    const centerY = (extent[1] + extent[3]) / 2;\n    if (this.ratio_ != 1) {\n      const halfWidth = (this.ratio_ * getWidth(extent)) / 2;\n      const halfHeight = (this.ratio_ * getHeight(extent)) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    // Compute an integer width and height.\n    const width = Math.ceil(getWidth(extent) / imageResolution);\n    const height = Math.ceil(getHeight(extent) / imageResolution);\n\n    // Modify the extent to match the integer width and height.\n    extent[0] = centerX - (imageResolution * width) / 2;\n    extent[2] = centerX + (imageResolution * width) / 2;\n    extent[1] = centerY - (imageResolution * height) / 2;\n    extent[3] = centerY + (imageResolution * height) / 2;\n\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n\n    const url = this.getRequestUrl_(\n      extent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      extent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    const srid = projection\n      .getCode()\n      .split(/:(?=\\d+$)/)\n      .pop();\n\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n\n    const url = this.url_;\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  }\n}\n\nexport default ImageArcGISRest;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {ImageArcGISRest, OSM} from '../src/ol/source.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\n\nconst url =\n  'https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/' +\n  'Specialty/ESRI_StateCityHighway_USA/MapServer';\n\nconst layers = [\n  new TileLayer({\n    source: new OSM(),\n  }),\n  new ImageLayer({\n    source: new ImageArcGISRest({\n      ratio: 1,\n      params: {},\n      url: url,\n    }),\n  }),\n];\nconst map = new Map({\n  layers: layers,\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4,\n  }),\n});\n"],"names":["ImageArcGISRest","Image","constructor","options","super","attributions","interpolate","projection","resolutions","this","crossOrigin_","undefined","crossOrigin","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","Object","assign","centerX","slice","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","addEventListener","EventType","handleImageChange","bind","getImageLoadFunction","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","getUrl","setImageLoadFunction","changed","setUrl","updateParams","Tile","source","OSM","Map","layers","target","view","View","center","zoom"],"sourceRoot":""}