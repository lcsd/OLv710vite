{"version":3,"file":"geojson-vt.js","mappings":"4KASA,MAAMA,EAAW,SAAUC,EAAKC,GAC9B,IAAKA,IAAUA,EAAMC,SACnB,OAAOD,EAGT,IAAIE,EACJ,MAAMC,EAAUH,EAAME,KACtB,IAAID,EAAWD,EAAMC,SAqBrB,OApBgB,IAAZE,GACFD,EAAO,aACgB,GAAnBD,EAASG,SACXF,EAAO,QACPD,EAAWA,EAAS,KAED,IAAZE,GACTD,EAAO,kBACgB,GAAnBD,EAASG,SACXF,EAAO,aACPD,EAAWA,EAAS,KAED,IAAZE,IACTD,EAAO,UACHD,EAASG,OAAS,IACpBF,EAAO,eACPD,EAAW,CAACA,KAIT,CACL,KAAQ,UACR,SAAY,CACV,KAAQC,EACR,YAAeD,GAEjB,WAAcD,EAAMK,KAExB,EAEMC,EAAQ,IAAI,KAAM,CACtBC,KAAM,IAAI,IAAK,CACbC,MAAO,cAILC,EAAQ,IAAI,IAAgB,CAChCC,WAAY,UACZJ,MAAO,SAAUK,GACf,MAAMH,EAAQG,EAAQC,IAAI,UAAY,UAEtC,OADAN,EAAMO,UAAUC,SAASN,GAClBF,CACT,IAGIS,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACP,GACTQ,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAKVC,MADY,sDAETC,MAAK,SAAUC,GACd,OAAOA,EAASC,MAClB,IACCF,MAAK,SAAUE,GACd,MAAMC,EAAYC,UAAUF,EAAM,CAChCG,OAAQ,KACRC,MAAO,IAEHC,EAAS,IAAI,IAAQ,CAEzBC,eAAgB,IAAI,IAAW,CAC7BC,KAAM,cACNC,MAAO,cACPL,OAAQ,CAAC,EAAG,EAAG,KAAM,UAGnBM,EAAe,IAAI,IAAiB,CACxCC,gBAAiB,SAAUC,GAEzB,OAAOC,KAAKC,UAAUF,EACxB,EACAG,iBAAkB,SAAUC,EAAMC,GAChC,MAAML,EAAYC,KAAKK,MAAMD,GACvBE,EAAOjB,EAAUkB,QACrBR,EAAU,GACVA,EAAU,GACVA,EAAU,IAENS,EAAUR,KAAKC,UACnB,CACEnC,KAAM,oBACN2C,SAAUH,EAAOA,EAAKG,SAAW,IAEnC/C,GAEI+C,EAAWhB,EAAOiB,aAAaF,EAAS,CAC5CjB,OAAQM,EAAac,cAAcC,mBAAmBb,GACtDc,kBAAmBlC,EAAImC,UAAUC,kBAEnCZ,EAAKa,YAAYP,EACnB,IAEFpC,EAAM4C,UAAUpB,EAClB,G","sources":["webpack:///./geojson-vt.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport Projection from '../src/ol/proj/Projection.js';\nimport VectorTileLayer from '../src/ol/layer/VectorTile.js';\nimport VectorTileSource from '../src/ol/source/VectorTile.js';\nimport View from '../src/ol/View.js';\nimport {Fill, Style} from '../src/ol/style.js';\n\n// Converts geojson-vt data to GeoJSON\nconst replacer = function (key, value) {\n  if (!value || !value.geometry) {\n    return value;\n  }\n\n  let type;\n  const rawType = value.type;\n  let geometry = value.geometry;\n  if (rawType === 1) {\n    type = 'MultiPoint';\n    if (geometry.length == 1) {\n      type = 'Point';\n      geometry = geometry[0];\n    }\n  } else if (rawType === 2) {\n    type = 'MultiLineString';\n    if (geometry.length == 1) {\n      type = 'LineString';\n      geometry = geometry[0];\n    }\n  } else if (rawType === 3) {\n    type = 'Polygon';\n    if (geometry.length > 1) {\n      type = 'MultiPolygon';\n      geometry = [geometry];\n    }\n  }\n\n  return {\n    'type': 'Feature',\n    'geometry': {\n      'type': type,\n      'coordinates': geometry,\n    },\n    'properties': value.tags,\n  };\n};\n\nconst style = new Style({\n  fill: new Fill({\n    color: '#eeeeee',\n  }),\n});\n\nconst layer = new VectorTileLayer({\n  background: '#1a2b39',\n  style: function (feature) {\n    const color = feature.get('COLOR') || '#eeeeee';\n    style.getFill().setColor(color);\n    return style;\n  },\n});\n\nconst map = new Map({\n  layers: [layer],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nconst url = 'https://openlayers.org/data/vector/ecoregions.json';\nfetch(url)\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (json) {\n    const tileIndex = geojsonvt(json, {\n      extent: 4096,\n      debug: 1,\n    });\n    const format = new GeoJSON({\n      // Data returned from geojson-vt is in tile pixel units\n      dataProjection: new Projection({\n        code: 'TILE_PIXELS',\n        units: 'tile-pixels',\n        extent: [0, 0, 4096, 4096],\n      }),\n    });\n    const vectorSource = new VectorTileSource({\n      tileUrlFunction: function (tileCoord) {\n        // Use the tile coordinate as a pseudo URL for caching purposes\n        return JSON.stringify(tileCoord);\n      },\n      tileLoadFunction: function (tile, url) {\n        const tileCoord = JSON.parse(url);\n        const data = tileIndex.getTile(\n          tileCoord[0],\n          tileCoord[1],\n          tileCoord[2]\n        );\n        const geojson = JSON.stringify(\n          {\n            type: 'FeatureCollection',\n            features: data ? data.features : [],\n          },\n          replacer\n        );\n        const features = format.readFeatures(geojson, {\n          extent: vectorSource.getTileGrid().getTileCoordExtent(tileCoord),\n          featureProjection: map.getView().getProjection(),\n        });\n        tile.setFeatures(features);\n      },\n    });\n    layer.setSource(vectorSource);\n  });\n"],"names":["replacer","key","value","geometry","type","rawType","length","tags","style","fill","color","layer","background","feature","get","getFill","setColor","map","layers","target","view","center","zoom","fetch","then","response","json","tileIndex","geojsonvt","extent","debug","format","dataProjection","code","units","vectorSource","tileUrlFunction","tileCoord","JSON","stringify","tileLoadFunction","tile","url","parse","data","getTile","geojson","features","readFeatures","getTileGrid","getTileCoordExtent","featureProjection","getView","getProjection","setFeatures","setSource"],"sourceRoot":""}