{"version":3,"file":"arcgis-tiled.js","mappings":"iMAmEA,MAAMA,UAAuBC,EAAA,EAI3BC,YAAYC,GAGVC,MAAM,CACJC,cAHFF,EAAUA,GAAoB,CAAC,GAGPE,aACtBC,UAAWH,EAAQG,UACnBC,YAAaJ,EAAQI,YACrBC,YAAaL,EAAQK,YACrBC,WAAYN,EAAQM,WACpBC,2BAA4BP,EAAQO,2BACpCC,SAAUR,EAAQQ,SAClBC,iBAAkBT,EAAQS,iBAC1BC,IAAKV,EAAQU,IACbC,KAAMX,EAAQW,KACdC,WAAyBC,IAAlBb,EAAQY,OAAsBZ,EAAQY,MAC7CE,WAAYd,EAAQc,WACpBC,WAAYf,EAAQe,aAOtBC,KAAKC,QAAUjB,EAAQkB,QAAU,CAAC,EAMlCF,KAAKG,YAA2BN,IAAlBb,EAAQoB,OAAsBpB,EAAQoB,MAMpDJ,KAAKK,YAAa,UAElBL,KAAKM,OAAON,KAAKO,mBACnB,CAMAA,mBACE,IAAIC,EAAI,EACR,MAAMC,EAAM,GACZ,IAAK,MAAMC,KAAOV,KAAKC,QACrBQ,EAAID,KAAOE,EAAM,IAAMV,KAAKC,QAAQS,GAEtC,OAAOD,EAAIE,KAAK,IAClB,CAQAC,YACE,OAAOZ,KAAKC,OACd,CAYAY,eACEC,EACAC,EACAC,EACAC,EACA3B,EACAY,GAEA,MAAMP,EAAOK,KAAKL,KAClB,IAAKA,EACH,OAMF,MAAMuB,EAAO5B,EACV6B,UACAC,MAAM,aACNC,MAUH,IAAI3B,EACJ,GATAQ,EAAa,KAAIa,EAAS,GAAK,IAAMA,EAAS,GAC9Cb,EAAa,KAAIc,EAAWL,KAAK,KACjCT,EAAe,OAAIgB,EACnBhB,EAAgB,QAAIgB,EACpBhB,EAAY,IAAIoB,KAAKC,MACnBrB,EAAY,IAAIA,EAAY,IAAIe,EAAa,GAAKA,GAIjC,GAAftB,EAAK6B,OACP9B,EAAMC,EAAK,OACN,CAELD,EAAMC,GADQ,SAAO,QAAcmB,GAAYnB,EAAK6B,QAEtD,CAEA,MAAMC,EAAc/B,EACjBgC,QAAQ,gBAAiB,oBACzBA,QAAQ,kBAAmB,2BAC9B,OAAO,OAAaD,EAAavB,EACnC,CAOAyB,kBAAkBV,GAChB,OAAOjB,KAAKG,OAASc,EAAa,CACpC,CAOAW,aAAa1B,GACX2B,OAAOC,OAAO9B,KAAKC,QAASC,GAC5BF,KAAKM,OAAON,KAAKO,mBACnB,CASAwB,gBAAgBjB,EAAWG,EAAY3B,GACrC,IAAIE,EAAWQ,KAAKgC,cAKpB,GAJKxC,IACHA,EAAWQ,KAAKiC,yBAAyB3C,IAGvCE,EAAS0C,iBAAiBV,QAAUV,EAAU,GAChD,OAGgB,GAAdG,GAAoBjB,KAAKG,SAC3Bc,EAAa,GAGf,MAAMD,EAAaxB,EAAS2C,mBAAmBrB,EAAWd,KAAKK,YAC/D,IAAIU,GAAW,QAAOvB,EAAS4C,YAAYtB,EAAU,IAAKd,KAAKqC,SAE7C,GAAdpB,IACFF,GAAW,QAAUA,EAAUE,EAAYjB,KAAKqC,UAIlD,MAAMC,EAAa,CACjB,EAAK,QACL,OAAU,QACV,aAAe,GAIjB,OAFAT,OAAOC,OAAOQ,EAAYtC,KAAKC,SAExBD,KAAKa,eACVC,EACAC,EACAC,EACAC,EACA3B,EACAgD,EAEJ,EAGF,QCxPA,MAIM,EAAS,CACb,IAAIC,EAAA,EAAU,CACZC,OAAQ,IAAIC,EAAA,IAEd,IAAIF,EAAA,EAAU,CACZG,OAAQ,EAAE,SAAU,SAAU,QAAS,SACvCF,OAAQ,IAAI,EAAe,CACzB9C,IAVJ,iHAcU,IAAIiD,EAAA,EAAI,CAClBC,OAAQ,EACRC,OAAQ,MACRC,KAAM,IAAIC,EAAA,GAAK,CACbC,OAAQ,EAAE,SAAU,SACpBC,KAAM,K","sources":["webpack:///../src/ol/source/TileArcGISRest.js","webpack:///./arcgis-tiled.js"],"sourcesContent":["/**\n * @module ol/source/TileArcGISRest\n */\n\nimport TileImage from './TileImage.js';\nimport {appendParams} from '../uri.js';\nimport {createEmpty} from '../extent.js';\nimport {modulo} from '../math.js';\nimport {scale as scaleSize, toSize} from '../size.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\nclass TileArcGISRest extends TileImage {\n  /**\n   * @param {Options} [options] Tile ArcGIS Rest options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    const srid = projection\n      .getCode()\n      .split(/:(?=\\d+$)/)\n      .pop();\n\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n    params['BBOX'] = tileExtent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(\n      params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\n    );\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.hidpi_ ? pixelRatio : 1;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && !this.hidpi_) {\n      pixelRatio = 1;\n    }\n\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    // Apply default params and override with user specified values.\n    const baseParams = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    Object.assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileArcGISRest;\n","import Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport {OSM, TileArcGISRest} from '../src/ol/source.js';\n\nconst url =\n  'https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/' +\n  'Specialty/ESRI_StateCityHighway_USA/MapServer';\n\nconst layers = [\n  new TileLayer({\n    source: new OSM(),\n  }),\n  new TileLayer({\n    extent: [-13884991, 2870341, -7455066, 6338219],\n    source: new TileArcGISRest({\n      url: url,\n    }),\n  }),\n];\nconst map = new Map({\n  layers: layers,\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4,\n  }),\n});\n"],"names":["TileArcGISRest","TileImage","constructor","options","super","attributions","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","zDirection","this","params_","params","hidpi_","hidpi","tmpExtent_","setKey","getKeyForParams_","i","res","key","join","getParams","getRequestUrl_","tileCoord","tileSize","tileExtent","pixelRatio","srid","getCode","split","pop","Math","round","length","modifiedUrl","replace","getTilePixelRatio","updateParams","Object","assign","tileUrlFunction","getTileGrid","getTileGridForProjection","getResolutions","getTileCoordExtent","getTileSize","tmpSize","baseParams","Tile","source","OSM","extent","Map","layers","target","view","View","center","zoom"],"sourceRoot":""}