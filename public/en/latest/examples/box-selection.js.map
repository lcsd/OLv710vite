{"version":3,"file":"box-selection.js","mappings":"wMASA,MAAMA,EAAe,IAAI,IAAa,CACpCC,IAAK,qDACLC,OAAQ,IAAI,MAGRC,EAAQ,IAAI,KAAM,CACtBC,KAAM,IAAI,IAAK,CACbC,MAAO,cAILC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAY,CACdC,OAAQR,EACRS,WAAY,UACZN,MAAO,SAAUO,GACf,MAAML,EAAQK,EAAQC,IAAI,cAAgB,UAE1C,OADAR,EAAMS,UAAUC,SAASR,GAClBF,CACT,KAGJW,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,EACNC,kBAAmB,OAIjBC,EAAgB,IAAI,KAAM,CAC9Bf,KAAM,IAAI,IAAK,CACbC,MAAO,6BAETe,OAAQ,IAAI,IAAO,CACjBf,MAAO,2BACPgB,MAAO,MAKLC,EAAS,IAAI,IAAO,CACxBnB,MAAO,SAAUO,GACf,MAAML,EAAQK,EAAQC,IAAI,cAAgB,UAE1C,OADAQ,EAAcP,UAAUC,SAASR,GAC1Bc,CACT,IAEFb,EAAIiB,eAAeD,GAEnB,MAAME,EAAmBF,EAAOG,cAG1BC,EAAU,IAAI,IAAQ,CAC1BC,UAAW,OAGbrB,EAAIiB,eAAeG,GAEnBA,EAAQE,GAAG,UAAU,WACnB,MAAMC,EAASH,EAAQI,cAAcC,YAC/BC,EAAchC,EACjBiC,oBAAoBJ,GACpBK,QAAQxB,GAAYA,EAAQoB,cAAcK,iBAAiBN,KAQxDO,EAAW9B,EAAI+B,UAAUC,cAQ/B,GAPgBF,GAAYG,KAAKC,GAAK,IAAO,EAOhC,CACX,MAAMC,EAAS,CAAC,EAAG,GACbC,EAAWhB,EAAQI,cAAca,QACvCD,EAASE,QAAQR,EAAUK,GAC3B,MAAMZ,EAASa,EAASX,YACxBC,EAAYa,SAAQ,SAAUnC,GAC5B,MAAMgC,EAAWhC,EAAQoB,cAAca,QACvCD,EAASE,QAAQR,EAAUK,GACvBC,EAASP,iBAAiBN,IAC5BL,EAAiBsB,KAAKpC,EAE1B,GACF,MACEc,EAAiBuB,OAAOf,EAE5B,IAGAN,EAAQE,GAAG,YAAY,WACrBJ,EAAiBwB,OACnB,IAEA,MAAMC,EAAUC,SAASC,eAAe,QAExC3B,EAAiBI,GAAG,CAAC,MAAO,WAAW,WACrC,MAAMwB,EAAQ5B,EAAiB6B,WAAW/C,KAAI,SAAUI,GACtD,OAAOA,EAAQC,IAAI,WACrB,IACIyC,EAAME,OAAS,EACjBL,EAAQM,UAAYH,EAAMI,KAAK,MAE/BP,EAAQM,UAAY,MAExB,G","sources":["webpack:///./box-selection.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {DragBox, Select} from '../src/ol/interaction.js';\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\nimport {platformModifierKeyOnly} from '../src/ol/events/condition.js';\n\nconst vectorSource = new VectorSource({\n  url: 'https://openlayers.org/data/vector/ecoregions.json',\n  format: new GeoJSON(),\n});\n\nconst style = new Style({\n  fill: new Fill({\n    color: '#eeeeee',\n  }),\n});\n\nconst map = new Map({\n  layers: [\n    new VectorLayer({\n      source: vectorSource,\n      background: '#1a2b39',\n      style: function (feature) {\n        const color = feature.get('COLOR_BIO') || '#eeeeee';\n        style.getFill().setColor(color);\n        return style;\n      },\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n    constrainRotation: 16,\n  }),\n});\n\nconst selectedStyle = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.6)',\n  }),\n  stroke: new Stroke({\n    color: 'rgba(255, 255, 255, 0.7)',\n    width: 2,\n  }),\n});\n\n// a normal select interaction to handle click\nconst select = new Select({\n  style: function (feature) {\n    const color = feature.get('COLOR_BIO') || '#eeeeee';\n    selectedStyle.getFill().setColor(color);\n    return selectedStyle;\n  },\n});\nmap.addInteraction(select);\n\nconst selectedFeatures = select.getFeatures();\n\n// a DragBox interaction used to select features by drawing boxes\nconst dragBox = new DragBox({\n  condition: platformModifierKeyOnly,\n});\n\nmap.addInteraction(dragBox);\n\ndragBox.on('boxend', function () {\n  const extent = dragBox.getGeometry().getExtent();\n  const boxFeatures = vectorSource\n    .getFeaturesInExtent(extent)\n    .filter((feature) => feature.getGeometry().intersectsExtent(extent));\n\n  // features that intersect the box geometry are added to the\n  // collection of selected features\n\n  // if the view is not obliquely rotated the box geometry and\n  // its extent are equalivalent so intersecting features can\n  // be added directly to the collection\n  const rotation = map.getView().getRotation();\n  const oblique = rotation % (Math.PI / 2) !== 0;\n\n  // when the view is obliquely rotated the box extent will\n  // exceed its geometry so both the box and the candidate\n  // feature geometries are rotated around a common anchor\n  // to confirm that, with the box geometry aligned with its\n  // extent, the geometries intersect\n  if (oblique) {\n    const anchor = [0, 0];\n    const geometry = dragBox.getGeometry().clone();\n    geometry.rotate(-rotation, anchor);\n    const extent = geometry.getExtent();\n    boxFeatures.forEach(function (feature) {\n      const geometry = feature.getGeometry().clone();\n      geometry.rotate(-rotation, anchor);\n      if (geometry.intersectsExtent(extent)) {\n        selectedFeatures.push(feature);\n      }\n    });\n  } else {\n    selectedFeatures.extend(boxFeatures);\n  }\n});\n\n// clear selection when drawing a new box and when clicking on the map\ndragBox.on('boxstart', function () {\n  selectedFeatures.clear();\n});\n\nconst infoBox = document.getElementById('info');\n\nselectedFeatures.on(['add', 'remove'], function () {\n  const names = selectedFeatures.getArray().map(function (feature) {\n    return feature.get('ECO_NAME');\n  });\n  if (names.length > 0) {\n    infoBox.innerHTML = names.join(', ');\n  } else {\n    infoBox.innerHTML = 'None';\n  }\n});\n"],"names":["vectorSource","url","format","style","fill","color","map","layers","source","background","feature","get","getFill","setColor","target","view","center","zoom","constrainRotation","selectedStyle","stroke","width","select","addInteraction","selectedFeatures","getFeatures","dragBox","condition","on","extent","getGeometry","getExtent","boxFeatures","getFeaturesInExtent","filter","intersectsExtent","rotation","getView","getRotation","Math","PI","anchor","geometry","clone","rotate","forEach","push","extend","clear","infoBox","document","getElementById","names","getArray","length","innerHTML","join"],"sourceRoot":""}