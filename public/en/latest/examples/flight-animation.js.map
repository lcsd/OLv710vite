{"version":3,"file":"flight-animation.js","mappings":"mNAWA,MAAMA,EAAY,IAAI,IAAU,CAC9BC,OAAQ,IAAI,IAAO,CACjBC,MAAO,YAILC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACJ,GACTK,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,EAAE,KAAU,MACpBC,KAAM,MAIJC,EAAQ,IAAI,KAAM,CACtBC,OAAQ,IAAI,IAAO,CACjBC,MAAO,UACPC,MAAO,MAILC,EAAgB,IAAI,IAAa,CACrCC,aACE,8EAEFC,OAAQ,WAENC,MADY,iCAETC,MAAK,SAAUC,GACd,OAAOA,EAASC,MAClB,IACCF,MAAK,SAAUE,GACd,MAAMC,EAAcD,EAAKE,QACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CAC3C,MAAME,EAASJ,EAAYE,GACrBG,EAAOD,EAAO,GACdE,EAAKF,EAAO,GAQZG,EALe,IAAIC,IAAIC,YAC3B,CAACC,EAAGL,EAAK,GAAIM,EAAGN,EAAK,IACrB,CAACK,EAAGJ,EAAG,GAAIK,EAAGL,EAAG,KAGUM,IAAI,IAAK,CAACC,OAAQ,KAGzCC,EAAW,GACjBP,EAAQQ,WAAWC,SAAQ,SAAUC,GACnC,MAAMC,EAAO,IAAI,IAAWD,EAASE,QACrCD,EAAKE,UAAU,YAAa,aAE5BN,EAASO,KACP,IAAI,IAAQ,CACVJ,SAAUC,EACVI,UAAU,IAGhB,IAGAC,EAAST,EAAc,GAAJZ,EACrB,CACAtB,EAAU4C,GAAG,aAAcC,EAC7B,GACJ,IAGIC,EAAe,IAAI,IAAY,CACnC7C,OAAQY,EACRJ,MAAO,SAAUsC,GAGf,OAAIA,EAAQC,IAAI,YACPvC,EAEA,IAEX,IAGFN,EAAI8C,SAASH,GAGb,SAASD,EAAeK,GACtB,MAAMC,GAAgB,QAAiBD,GACjCE,EAAaF,EAAME,WACzBD,EAAcE,SAAS5C,GAEvB,MAAMyB,EAAWrB,EAAcyC,cAC/B,IAAK,IAAIhC,EAAI,EAAGA,EAAIY,EAASX,OAAQD,IAAK,CACxC,MAAMyB,EAAUb,EAASZ,GACzB,IAAKyB,EAAQC,IAAI,YAAa,CAE5B,MAAMT,EAASQ,EAAQQ,cAAcC,iBAC/BC,EAAcL,EAAWM,KAAOX,EAAQC,IAAI,SAClD,GAAIS,GAAe,EAAG,CACpB,MAAME,EAdM,IAcUF,EAElBE,GAAiBpB,EAAOhB,QAC1BwB,EAAQa,IAAI,YAAY,GAG1B,MAAMC,EAAWC,KAAKC,IAAIJ,EAAepB,EAAOhB,QAC1CyC,EAAc,IAAI,IAAWzB,EAAO0B,MAAM,EAAGJ,IAG7CK,GAAa,QAAS/D,EAAIgE,UAAUC,gBAAgBC,aACpDpC,EAAS6B,KAAKQ,MAAMnE,EAAIgE,UAAUI,YAAY,GAAKL,GAGzDF,EAAYQ,UAAUvC,EAASiC,EAAY,GAC3Cf,EAAcsB,aAAaT,GAC3BA,EAAYQ,UAAUN,EAAY,GAClCf,EAAcsB,aAAaT,EAC7B,CACF,CACF,CAEA7D,EAAIuE,QACN,CAEA,SAAS/B,EAAST,EAAUyC,GAC1BC,OAAOC,YAAW,WAChB,IAAIC,EAAQC,KAAKC,MACjB9C,EAASE,SAAQ,SAAUW,GACzBA,EAAQa,IAAI,QAASkB,GACrBjE,EAAcoE,WAAWlC,GACzB,MAAMmC,GACHnC,EAAQQ,cAAcC,iBAAiBjC,OAAS,GA9CrC,IA+CduD,GAASI,CACX,GACF,GAAGP,EACL,C","sources":["webpack:///./flight-animation.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport Map from '../src/ol/Map.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {getVectorContext} from '../src/ol/render.js';\nimport {getWidth} from '../src/ol/extent.js';\n\nconst tileLayer = new TileLayer({\n  source: new Stamen({\n    layer: 'toner',\n  }),\n});\n\nconst map = new Map({\n  layers: [tileLayer],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 2,\n  }),\n});\n\nconst style = new Style({\n  stroke: new Stroke({\n    color: '#EAE911',\n    width: 2,\n  }),\n});\n\nconst flightsSource = new VectorSource({\n  attributions:\n    'Flight data by ' +\n    '<a href=\"https://openflights.org/data.html\">OpenFlights</a>,',\n  loader: function () {\n    const url = 'data/openflights/flights.json';\n    fetch(url)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n        const flightsData = json.flights;\n        for (let i = 0; i < flightsData.length; i++) {\n          const flight = flightsData[i];\n          const from = flight[0];\n          const to = flight[1];\n\n          // create an arc circle between the two locations\n          const arcGenerator = new arc.GreatCircle(\n            {x: from[1], y: from[0]},\n            {x: to[1], y: to[0]}\n          );\n\n          const arcLine = arcGenerator.Arc(100, {offset: 10});\n          // paths which cross the -180°/+180° meridian are split\n          // into two sections which will be animated sequentially\n          const features = [];\n          arcLine.geometries.forEach(function (geometry) {\n            const line = new LineString(geometry.coords);\n            line.transform('EPSG:4326', 'EPSG:3857');\n\n            features.push(\n              new Feature({\n                geometry: line,\n                finished: false,\n              })\n            );\n          });\n          // add the features with a delay so that the animation\n          // for all features does not start at the same time\n          addLater(features, i * 50);\n        }\n        tileLayer.on('postrender', animateFlights);\n      });\n  },\n});\n\nconst flightsLayer = new VectorLayer({\n  source: flightsSource,\n  style: function (feature) {\n    // if the animation is still active for a feature, do not\n    // render the feature with the layer style\n    if (feature.get('finished')) {\n      return style;\n    } else {\n      return null;\n    }\n  },\n});\n\nmap.addLayer(flightsLayer);\n\nconst pointsPerMs = 0.02;\nfunction animateFlights(event) {\n  const vectorContext = getVectorContext(event);\n  const frameState = event.frameState;\n  vectorContext.setStyle(style);\n\n  const features = flightsSource.getFeatures();\n  for (let i = 0; i < features.length; i++) {\n    const feature = features[i];\n    if (!feature.get('finished')) {\n      // only draw the lines for which the animation has not finished yet\n      const coords = feature.getGeometry().getCoordinates();\n      const elapsedTime = frameState.time - feature.get('start');\n      if (elapsedTime >= 0) {\n        const elapsedPoints = elapsedTime * pointsPerMs;\n\n        if (elapsedPoints >= coords.length) {\n          feature.set('finished', true);\n        }\n\n        const maxIndex = Math.min(elapsedPoints, coords.length);\n        const currentLine = new LineString(coords.slice(0, maxIndex));\n\n        // animation is needed in the current and nearest adjacent wrapped world\n        const worldWidth = getWidth(map.getView().getProjection().getExtent());\n        const offset = Math.floor(map.getView().getCenter()[0] / worldWidth);\n\n        // directly draw the lines with the vector context\n        currentLine.translate(offset * worldWidth, 0);\n        vectorContext.drawGeometry(currentLine);\n        currentLine.translate(worldWidth, 0);\n        vectorContext.drawGeometry(currentLine);\n      }\n    }\n  }\n  // tell OpenLayers to continue the animation\n  map.render();\n}\n\nfunction addLater(features, timeout) {\n  window.setTimeout(function () {\n    let start = Date.now();\n    features.forEach(function (feature) {\n      feature.set('start', start);\n      flightsSource.addFeature(feature);\n      const duration =\n        (feature.getGeometry().getCoordinates().length - 1) / pointsPerMs;\n      start += duration;\n    });\n  }, timeout);\n}\n"],"names":["tileLayer","source","layer","map","layers","target","view","center","zoom","style","stroke","color","width","flightsSource","attributions","loader","fetch","then","response","json","flightsData","flights","i","length","flight","from","to","arcLine","arc","GreatCircle","x","y","Arc","offset","features","geometries","forEach","geometry","line","coords","transform","push","finished","addLater","on","animateFlights","flightsLayer","feature","get","addLayer","event","vectorContext","frameState","setStyle","getFeatures","getGeometry","getCoordinates","elapsedTime","time","elapsedPoints","set","maxIndex","Math","min","currentLine","slice","worldWidth","getView","getProjection","getExtent","floor","getCenter","translate","drawGeometry","render","timeout","window","setTimeout","start","Date","now","addFeature","duration"],"sourceRoot":""}