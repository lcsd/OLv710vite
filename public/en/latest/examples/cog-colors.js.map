{"version":3,"file":"cog-colors.js","mappings":"0HAIA,MAQMA,EAAgBC,SAASC,eAAe,aAC9CF,EAAcG,MAPU,UASxB,MAAMC,EAAgBH,SAASC,eAAe,aAC9CE,EAAcD,MATU,UAWxB,MAAME,EAAiBJ,SAASC,eAAe,oBACzCI,EAAgBL,SAASC,eAAe,mBAC9CI,EAAcH,QAXW,IAWaI,WAEtC,MAAMC,EAAiBP,SAASC,eAAe,oBACzCO,EAAgBR,SAASC,eAAe,mBAG9C,SAASQ,IACP,MAAMC,EAAY,CAAC,EAEbC,EAAWZ,EAAcG,MACzBU,EAAWT,EAAcD,MACzBW,EAAQC,OAAOD,MAAM,CAACF,EAAUC,IAAWG,KAAK,OAEhDC,EAAWC,WAAWZ,EAAcH,OAEpCgB,GADWD,WAAWT,EAAcN,OAChBc,GA/BX,GAiCf,IAAK,IAAIG,EAAI,EAAGA,GAjCD,KAiCkBA,EAAG,CAClC,MAAMC,EAAQP,EAAMM,EAlCP,IAkCqBE,MAC5BnB,EAAQc,EAAWG,EAAID,EAC7BR,EAAU,QAAQS,KAAOjB,EACzBQ,EAAU,MAAMS,KAAOC,EAAM,GAC7BV,EAAU,QAAQS,KAAOC,EAAM,GAC/BV,EAAU,OAAOS,KAAOC,EAAM,EAChC,CACA,OAAOV,CACT,CAtBAF,EAAcN,MAdU,GAccI,WAoCtC,MAMMgB,EAAS,IAAI,IAAQ,CACzBC,QAAS,CACP,CAEEC,IAAK,8GACLC,IAAK,KAEP,CAEED,IAAK,8GACLC,IAAK,QAKLC,EAAQ,IAAI,IAAU,CAC1BC,MAAO,CACLjB,UAAWD,IACXW,MAAO,CAAC,cAAe,CAAC,UAxBf,CACX,IACA,CAAC,IAAK,CAAC,OAAQ,GAAI,CAAC,OAAQ,IAC5B,CAAC,IAAK,CAAC,OAAQ,GAAI,CAAC,OAAQ,QAf9B,WACE,MAAMQ,EAAQ,GACd,IAAK,IAAIT,EAAI,EAAGA,GA9CD,KA8CkBA,EAAG,CAClCS,EAAU,EAAJT,GAAS,CAAC,MAAO,QAAQA,KAC/B,MAAMU,EAAM,CAAC,MAAO,MAAMV,KACpBW,EAAQ,CAAC,MAAO,QAAQX,KACxBY,EAAO,CAAC,MAAO,OAAOZ,KAC5BS,EAAU,EAAJT,EAAQ,GAAK,CAAC,QAASU,EAAKC,EAAOC,EAC3C,CACA,OAAOH,CACT,CA0BgDI,KAE9CV,OAAQA,IAGV,SAASW,IACPP,EAAMQ,qBAAqBzB,KAC3BL,EAAe+B,UAAYlB,WAAWZ,EAAcH,OAAOkC,QAAQ,GACnE7B,EAAe4B,UAAYlB,WAAWT,EAAcN,OAAOkC,QAAQ,EACrE,CAEArC,EAAcsC,iBAAiB,QAASJ,GACxC9B,EAAckC,iBAAiB,QAASJ,GACxC5B,EAAcgC,iBAAiB,QAASJ,GACxCzB,EAAc6B,iBAAiB,QAASJ,GACxCA,IAEY,IAAI,IAAI,CAClBK,OAAQ,MACRC,OAAQ,CAACb,GACTc,KAAMlB,EAAOmB,W","sources":["webpack:///./cog-colors.js"],"sourcesContent":["import GeoTIFF from '../src/ol/source/GeoTIFF.js';\nimport Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/WebGLTile.js';\n\nconst segments = 10;\n\nconst defaultMinColor = '#0300AD';\nconst defaultMaxColor = '#00ff00';\n\nconst defaultMinValue = -0.5;\nconst defaultMaxValue = 0.7;\n\nconst minColorInput = document.getElementById('min-color');\nminColorInput.value = defaultMinColor;\n\nconst maxColorInput = document.getElementById('max-color');\nmaxColorInput.value = defaultMaxColor;\n\nconst minValueOutput = document.getElementById('min-value-output');\nconst minValueInput = document.getElementById('min-value-input');\nminValueInput.value = defaultMinValue.toString();\n\nconst maxValueOutput = document.getElementById('max-value-output');\nconst maxValueInput = document.getElementById('max-value-input');\nmaxValueInput.value = defaultMaxValue.toString();\n\nfunction getVariables() {\n  const variables = {};\n\n  const minColor = minColorInput.value;\n  const maxColor = maxColorInput.value;\n  const scale = chroma.scale([minColor, maxColor]).mode('lab');\n\n  const minValue = parseFloat(minValueInput.value);\n  const maxValue = parseFloat(maxValueInput.value);\n  const delta = (maxValue - minValue) / segments;\n\n  for (let i = 0; i <= segments; ++i) {\n    const color = scale(i / segments).rgb();\n    const value = minValue + i * delta;\n    variables[`value${i}`] = value;\n    variables[`red${i}`] = color[0];\n    variables[`green${i}`] = color[1];\n    variables[`blue${i}`] = color[2];\n  }\n  return variables;\n}\n\nfunction colors() {\n  const stops = [];\n  for (let i = 0; i <= segments; ++i) {\n    stops[i * 2] = ['var', `value${i}`];\n    const red = ['var', `red${i}`];\n    const green = ['var', `green${i}`];\n    const blue = ['var', `blue${i}`];\n    stops[i * 2 + 1] = ['color', red, green, blue];\n  }\n  return stops;\n}\n\nconst ndvi = [\n  '/',\n  ['-', ['band', 2], ['band', 1]],\n  ['+', ['band', 2], ['band', 1]],\n];\n\nconst source = new GeoTIFF({\n  sources: [\n    {\n      // visible red, band 1 in the style expression above\n      url: 'https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/2020/S2A_36QWD_20200701_0_L2A/B04.tif',\n      max: 10000,\n    },\n    {\n      // near infrared, band 2 in the style expression above\n      url: 'https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/2020/S2A_36QWD_20200701_0_L2A/B08.tif',\n      max: 10000,\n    },\n  ],\n});\n\nconst layer = new TileLayer({\n  style: {\n    variables: getVariables(),\n    color: ['interpolate', ['linear'], ndvi, ...colors()],\n  },\n  source: source,\n});\n\nfunction update() {\n  layer.updateStyleVariables(getVariables());\n  minValueOutput.innerText = parseFloat(minValueInput.value).toFixed(1);\n  maxValueOutput.innerText = parseFloat(maxValueInput.value).toFixed(1);\n}\n\nminColorInput.addEventListener('input', update);\nmaxColorInput.addEventListener('input', update);\nminValueInput.addEventListener('input', update);\nmaxValueInput.addEventListener('input', update);\nupdate();\n\nconst map = new Map({\n  target: 'map',\n  layers: [layer],\n  view: source.getView(),\n});\n"],"names":["minColorInput","document","getElementById","value","maxColorInput","minValueOutput","minValueInput","toString","maxValueOutput","maxValueInput","getVariables","variables","minColor","maxColor","scale","chroma","mode","minValue","parseFloat","delta","i","color","rgb","source","sources","url","max","layer","style","stops","red","green","blue","colors","update","updateStyleVariables","innerText","toFixed","addEventListener","target","layers","view","getView"],"sourceRoot":""}